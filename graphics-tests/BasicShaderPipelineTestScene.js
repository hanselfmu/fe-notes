function BasicShaderPipelineTestScene(e,t,i){GraphicsTestBase.call(this,e),this.testConfigurations=t,this.testMaterials=[],this.results=[],this.currentTestConfigIndex=0,this.surfaceProperties=i,this.cameraSpeed=.03,this.cameraDistMax=2.5,this.cameraDistMin=.7,this.lightSpeed=.03,this.updateTimePerRender=.5}function SphericalToCartesian(e,t,i){return new THREE.Vector3(e*Math.sin(t)*Math.cos(i),e*Math.sin(t)*Math.sin(i),e*Math.cos(t))}var createMaterial=function(e,t,i,r,n){var s={}
void 0!==i&&(s[i]=""),void 0!==r&&(s[r]="")
var a="#define VERTEX_SHADER\n"+t,o="#define FRAGMENT_SHADER\n"+t,h=new THREE.ShaderMaterial({uniforms:{lightPosInt:{type:"v4",value:new THREE.Vector4(0,0,0,0)},albedo:{type:"t",value:e.getTexture("assets/albedo.png")}},defines:s,attributes:{},vertexShader:a,fragmentShader:o})
if(setupSurfaceProperties(h,n),isEnvironmentmapRequired(r,i)){var p=e.getTexture("environmentMap")
h.uniforms.environmentMap={type:"t",value:p},p.format=THREE.RGBFormat}return isBumpmapRequired(r,i)&&(h.uniforms.bumpMap={type:"t",value:e.getTexture("assets/bumpMap.png")}),isHeightmapRequired(r,i)&&(h.uniforms.heightMap={type:"t",value:e.getTexture("assets/heightMap.png")}),h},isBumpmapRequired=function(e,t){return"LIGHTING_FRAGMENT_BUMP"==t||"LIGHTING_FRAGMENT_RELIEF"==t},isEnvironmentmapRequired=function(e,t){return"EFFECT_FRESNEL"==e||"EFFECT_REFLECTION"==e},isHeightmapRequired=function(e,t){return"LIGHTING_FRAGMENT_RELIEF"==t},setupSurfaceProperties=function(e,t){var i={}
i.ambience={type:"v3",value:new THREE.Vector3(.05,.05,.05)},i.specularColorShininess={type:"v4",value:new THREE.Vector4(.9,.9,.9,2048)},i.RefractionIndices={type:"v3",value:new THREE.Vector3(.98,.975,.97)},i.reliefDepthScale={type:"f",value:.05},i.lightColor={type:"v3",value:new THREE.Vector3(.4,.4,.4)}
var r=Object.keys(i)
if(void 0!==t)for(var n=0;n<r.length;++n){var s=r[n]
void 0!==t[s]&&(i[s].value=t[s])}for(var n=0;n<r.length;++n)e.uniforms[r[n]]=i[r[n]]},setupSceneProperties=function(e){var t={}
if(t.rotationX=0,t.rotationY=.5,t.rotationZ=.5,t.rotationSpeedX=.01,t.rotationSpeedY=.02,t.rotationSpeedZ=.01,void 0!==e&&null!==e)for(var i=Object.keys(e),r=0;r<i.length;++r){var n=i[r]
void 0!==t[n]&&(t[n]=e[n])}return t}
BasicShaderPipelineTestScene.prototype=Object.create(GraphicsTestBase.prototype),BasicShaderPipelineTestScene.prototype.animateLights=function(e){e*=this.lightSpeed
var t=10,i=3,r=Math.cos(e)*i,n=2,s=3,a=this.material.uniforms
a.lightPosInt.value=new THREE.Vector4(r,n,s,t)},BasicShaderPipelineTestScene.prototype.initializeAssets=function(){var e=[],t="assets/",i=".jpg",r=[t+"px"+i,t+"nx"+i,t+"py"+i,t+"ny"+i,t+"pz"+i,t+"nz"+i]
e.push({cubeName:"environmentMap",urls:r}),e.push("assets/bumpMap.png"),e.push("assets/heightMap.png"),e.push("assets/albedo.png"),this.loadTextures(e,this.afterTextureLoad)},BasicShaderPipelineTestScene.prototype.afterTextureLoad=function(){for(var e=getUberShader(),t=0;t<this.testConfigurations.length;++t){var i=this.testConfigurations[t]
i.sceneProperties=setupSceneProperties(i.sceneProperties),this.testMaterials.push(createMaterial(this,e,i.lightingType,i.effectType,i.surfaceProperties))}var r=new THREE.Scene
this.scene=r,this.camera=new THREE.PerspectiveCamera(75,window.innerWidth/window.innerHeight,.01,1e3),this.renderer=new THREE.WebGLRenderer,this.renderer.autoClear=!1,this.renderer.setSize(window.innerWidth,window.innerHeight),document.getElementById(testContainerName).appendChild(this.renderer.domElement),this.camera.position.z=10,this.camera.position.y=0,this.loadGeometry(r),this.demoMode===!0?(this.setRenderFrameCount(300),this.updateTimePerRender=2):(this.setRenderFrameCount(2e3),this.updateTimePerRender=.3),this.renderer.render(this.scene,this.camera),GraphicsTestBase.prototype.initializeAssets.call(this)},BasicShaderPipelineTestScene.prototype.update=function(e){this.mesh.rotation.set(Math.sin(e*this.rotationSpeedX)*this.rotationX,Math.cos(.5*Math.PI+e*this.rotationSpeedY)*this.rotationY,-1+Math.sin(e*this.rotationSpeedZ)*this.rotationZ)
var t=.5*Math.cos(e*this.cameraSpeed)+.5
this.camera.position.setZ(this.cameraDistMin*t+(1-t)*this.cameraDistMax),this.animateLights(e)},BasicShaderPipelineTestScene.prototype.renderLoopResultsReceived=function(e,t){this.results.push({id:this.testConfigurations[this.currentTestConfigIndex].id,duration:e,frames:t}),this.currentTestConfigIndex=this.currentTestConfigIndex+1},BasicShaderPipelineTestScene.prototype.shouldRestartRenderLoop=function(){return!1},BasicShaderPipelineTestScene.prototype.shouldRecreateScene=function(){return this.currentTestConfigIndex<this.testMaterials.length},BasicShaderPipelineTestScene.prototype.createScene=function(){GraphicsTestBase.prototype.createScene.call(this)
var e=this.testConfigurations[this.currentTestConfigIndex],t=e.sceneProperties,i=this.testMaterials[this.currentTestConfigIndex]
this.mesh.material=i,this.material=i,this.rotationX=t.rotationX,this.rotationY=t.rotationY,this.rotationZ=t.rotationZ,this.rotationSpeedX=t.rotationSpeedX,this.rotationSpeedY=t.rotationSpeedY,this.rotationSpeedZ=t.rotationSpeedZ},BasicShaderPipelineTestScene.prototype.testCompleted=function(){for(var e="",t=[],i=[],r=[],n=0;n<this.results.length;++n){var s=this.results[n],e=e+" Test Id: "+s.id+" frames: "+s.frames+" rendering time: "+s.duration+" avg fps: "+s.frames/(.001*s.duration)+"\n"
t.push(s.frames),i.push(s.duration),r.push({id:s.id,frames:s.frames,duration:s.duration,avg_fps:s.frames/(.001*s.duration)})}var a=BasemarkWebEngine.median(t),o=BasemarkWebEngine.median(i),h=a/(.001*o)
this.showInfo(e),BasemarkWebEngine.submitResult(a,guide,r,o,h,2e3),BasemarkWebEngine.nextPage(location.pathname)},BasicShaderPipelineTestScene.prototype.loadGeometry=function(e){var t=this,i=new THREE.Vector3(0,0,-2),r=new THREE.Vector3(.04,.04,.04),n=new THREE.ColladaLoader
n.load("assets/Shield.DAE",function(n){n.scene.traverse(function(e){e instanceof THREE.Mesh&&(t.geometry=e.geometry)}),t.geometry.computeBoundingSphere()
var s=t.geometry.boundingSphere.center,a=new THREE.Matrix4
a.makeTranslation(-s.x,-s.y,-s.z),t.geometry.applyMatrix(a),t.geometry.computeBoundingSphere(),t.geometry.computeTangents()
var o=new THREE.Mesh(t.geometry,void 0)
o.position.set(i.x,i.y,i.z),o.scale.set(r.x,r.y,r.z),e.add(o),t.mesh=o,t.assetInitializationDone()})}
